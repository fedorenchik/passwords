#!/bin/bash

# passwords - Random Password Generator
# Copyright (C) 2011  Leonid V. Fedorenchik <leonidsbox@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Generates ROWS*COLUMNS passwords using /dev/urandom or /dev/random.
#
# ChangeLog:
# version 1.1.1
#         * Made reading of /dev/u?random more scalable.
# version 1.1
#         * Added --paranoid (-p) parameter to use /dev/random (TRULY random)
#           instead of /dev/urandom (pseudo random), this parameter also sets
#           COLUMNS=1. When using this option you may need to wait some time...
#           just continue do your own staff and check from time to time if it is
#           ready.
#         * Fix bug when output of the command is shown if password
#           evaluates to the known command on the current shell
#         * Added license note
#         * Added --help and --version parameters
# version 1.0.2
#         * Added parameter to specify length of passwords; support only
#           password lengths from MIN_LENGTH to MAX_LENGTH,
#           which is 1 to 12 currently.
# version 1.0.1
#         * Optimize code a little bit: use 1 echo instead of 2.
# version 1.0
#         * Initial version; prints ROWS*COLUMNS passwords, by default
#           ROWS=COLUMNS=10, each password is 8 characters long.

# info constants
declare -r VERSION_STRING="1.1.1"

# errors
EX_USAGE=64 # command line usage error

# default parameters
declare -i password_length=8

# support password lenghts from MIN_LENGTH to MAX_LENGTH
declare -r -i MIN_LENGTH=1
declare -r -i MAX_LENGTH=12

print_help()
{
	echo "Usage: $0 [-p|--paranoid] [N], where N is a number between $MIN_LENGTH and $MAX_LENGTH."
}

print_version()
{
	echo "$0: version: $VERSION_STRING"
}

parse_parameters()
{
	for cur_param in $@; do
		if [[ $cur_param =~ -p|--paranoid ]]; then
			TRUE_RANDOM=1
			STARVING_POOL=1
		elif [[ $cur_param =~ [[:digit:]]+ ]]; then
			password_length=$cur_param
			if ((password_length < MIN_LENGTH)); then
				password_length=$MIN_LENGTH
			fi
			if ((password_length > MAX_LENGTH)); then
				password_length=$MAX_LENGTH
			fi
		elif [[ $cur_param =~ --version ]]; then
			print_version
			exit 0
		elif [[ $cur_param =~ --help ]]; then
			print_help
			exit 0
		else
			echo "Invalid argument passed."
			print_help
			exit $EX_USAGE
		fi
	done
}
parse_parameters $@

#XXX: read every GRAB_OFFSET characters: 1) is it compromising randomness
#     compared to just read until enough? 2) Is it reliable and scalable?
declare -r -i MIN_CHARS=100
declare -i GRAB_CHARS=$((password_length*10))
if ((GRAB_CHARS < MIN_CHARS)); then
	GRAB_CHARS=$MIN_CHARS
fi

if [ $TRUE_RANDOM ]; then
	declare -r RANDOM_ENTROPY_POOL=/dev/random
else
	declare -r RANDOM_ENTROPY_POOL=/dev/urandom
fi

declare -r -i ROWS=10
if [ $STARVING_POOL ]; then
	declare -r -i COLUMNS=1
else
	declare -r -i COLUMNS=10
fi

for ((i=1; i <= ROWS; i++)); do
	for ((j=1; j <= COLUMNS; j++)); do
		password=`head -c $GRAB_CHARS $RANDOM_ENTROPY_POOL | tr -dc [:graph:] | head -c $password_length`
		echo -n "$password "
	done
	echo
done
exit 0
